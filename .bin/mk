#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const _ = require('lodash');

main();

async function main() {
    const source = await getDirectory('source');
    renderMD(source);
}

async function getDirectory(fileOrDirPath) {
    const absolutePath = path.resolve('.', fileOrDirPath);
    const relativePath = path.relative('.', fileOrDirPath);
    const name = fileOrDirPath.match(/([^\/]+?)(\.(js|ts|md)){0,1}$/i)[1];
    const stat = await fs.promises.stat(absolutePath);
    if (stat.isFile()) {
        return { type: 'file', name: name, path: relativePath };
    }
    const dirs = await fs.promises.readdir(absolutePath);
    const files = await Promise.all(_.map(dirs, (dir) => getDirectory(path.join(fileOrDirPath, dir))));
    return { type: 'directory', name: name, path: relativePath, child: files };
}

async function renderMD(source) {
    await fs.promises.writeFile(
        './README.md',
        `## 使用 TypeScript 实现 Lodash

${renderDirectory(source)}`
    );

    function renderDirectory(fileOrDir) {
        if (fileOrDir.type === 'file') {
            return _.includes(fileOrDir.name, '_') ? '' : `-   [${fileOrDir.name}](<${fileOrDir.path}>)\n`;
        } else {
            return fileOrDir.name === 'source'
                ? _.map(fileOrDir.child, renderDirectory).join('')
                : `<details open>
<summary><font size=4>${_.upperFirst(fileOrDir.name)}</font></summary>

${_.map(fileOrDir.child, renderDirectory).join('')}
</details>

`;
        }
    }
}
