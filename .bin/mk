#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const _ = require('lodash');

main();

async function main() {
    const directory = await getDirectory('source');
    writeMarkdown(directory, 'README.md', _.partial(renderDirectories, renderFileAsLink));
}

async function getDirectory(fileOrDirPath) {
    const absolutePath = path.resolve('.', fileOrDirPath);
    const relativePath = path.relative('.', fileOrDirPath);
    const name = path.basename(fileOrDirPath);
    const stat = await fs.promises.stat(absolutePath);
    if (stat.isFile()) {
        return {
            type: 'file',
            name: name,
            path: relativePath,
            title: name.replace(/\.js|\.ts/, ''),
        };
    } else {
        const dirs = await fs.promises.readdir(absolutePath);
        const files = await Promise.all(_.map(dirs, (dir) => getDirectory(path.join(fileOrDirPath, dir))));
        return { type: 'directory', name: name, path: relativePath, child: files };
    }
}

async function writeMarkdown(directory, target, render) {
    await fs.promises.writeFile(
        target,
        `## 使用 TypeScript 实现 Lodash

${render(directory.child)}
`
    );
}

function renderDirectories(renderFile, directories) {
    return directories
        .filter((fileOrDir) => !fileOrDir.name.startsWith('_'))
        .map((fileOrDir) => {
            if (fileOrDir.type === 'directory') {
                return `<details open>
<summary><font size=4>${_.upperFirst(fileOrDir.name)}</font></summary>

${renderDirectories(renderFile, fileOrDir.child)}

</details>
`;
            } else {
                return renderFile(fileOrDir);
            }
        })
        .join('\n');
}

function renderFileAsLink(file) {
    return `-   [${file.title}](<${file.path}>)`;
}
